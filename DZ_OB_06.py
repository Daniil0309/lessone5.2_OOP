# Задание: Разработать консольную игру "Битва героев" на Python с использованием классов и разработать план проекта по этапам/
# или создать kanban доску для работы над данным проектом
# Общее описание:
# Создайте простую текстовую боевую игру, где игрок и компьютер управляют героями с различными характеристиками. Игра состоит из раундов,
# в каждом раунде игроки по очереди наносят урон друг другу, пока у одного из героев не закончится здоровье.
# Требования:
# Используйте ООП (Объектно-Ориентированное Программирование) для создания классов героев.
# Игра должна быть реализована как консольное приложение.
# Классы:
# Класс Hero:
# Атрибуты:
# Имя (name)
# Здоровье (health), начальное значение 100
# Сила удара (attack_power), начальное значение 20
# Методы:
# attack(other): атакует другого героя (other), отнимая здоровье в размере своей силы удара
# is_alive(): возвращает True, если здоровье героя больше 0, иначе False
# Класс Game:
# Атрибуты:
# Игрок (player), экземпляр класса Hero
# Компьютер (computer), экземпляр класса Hero
# Методы:
# start(): начинает игру, чередует ходы игрока и компьютера, пока один из героев не умрет. Выводит информацию о каждом ходе
# (кто атаковал и сколько здоровья осталось у противника) и объявляет победителя.

import random
# Определение класса Hero, представляющего героя в игре
class Hero:
    # Конструктор класса, инициализирующий атрибуты героя
    def __init__(self, name, health=100, attack_power=20):
        self.name = name  # Имя героя
        self.health = health  # Здоровье героя, по умолчанию 100
        self.attack_power = attack_power  # Сила атаки героя, по умолчанию 20

    # Метод атаки, который уменьшает здоровье другого героя на величину силы атаки
    def attack(self, other):
        other.health -= self.attack_power  # Уменьшаем здоровье другого героя
        print(f'{self.name} атакует {other.name}, отнимая здоровья в размере {self.attack_power}')  # Выводим информацию об атаке

    # Метод проверки, жив ли герой
    def is_alive(self):
        # Возвращаем True, если здоровье героя больше 0, иначе False
        return self.health > 0

# Определение класса Game, представляющего саму игру
class Game:
    # Конструктор класса, инициализирующий игрока и компьютерного противника
    def __init__(self, player, computer='Computer'):
        self.player = Hero(player)  # Создаем объект игрока с указанным именем
        self.computer = Hero(computer)  # Создаем объект компьютера с именем "Computer"

    # Метод запуска игры
    def start(self):
        # Цикл продолжается, пока оба героя живы
        while self.player.is_alive() and self.computer.is_alive():
            # Ход игрока
            self.player.attack(self.computer)  # Игрок атакует компьютерного противника
            print(f"У {self.computer.name} осталось {self.computer.health} здоровья.")  # Выводим остаток здоровья компьютера
            # Проверяем, жив ли еще компьютерный противник
            if not self.computer.is_alive():
                print(f"{self.computer.name} повержен! {self.player.name} победил!")  # Если компьютер повержен, объявляем победу игрока
                break  # Выходим из цикла игры

            # Ход компьютера
            self.computer.attack(self.player)  # Компьютер атакует игрока
            print(f"У {self.player.name} осталось {self.player.health} здоровья.")  # Выводим остаток здоровья игрока
            # Проверяем, жив ли еще игрок
            if not self.player.is_alive():
                print(f"{self.player.name} повержен! {self.computer.name} победил!")  # Если игрок повержен, объявляем победу компьютера
                break  # Выходим из цикла игры

        # Выводим сообщение об окончании игры
        print("Игра окончена.")

# Основная часть программы
if __name__ == "__main__":
    # Запрашиваем у пользователя имя его героя
    player = input("Введите имя вашего героя: ")
    # Создаем объект игры с именем игрока
    game = Game(player)
    # Запускаем игру
    game.start()



