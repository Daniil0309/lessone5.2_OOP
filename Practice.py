# #Задача №1 с использованием полиморфизма:
# Ты уже знаешь, как можно закомментировать задачу, чтобы программа не выдавала ошибки.
# Создайте класс Animal с методом make_sound(). Затем создайте несколько дочерних классов (например, Dog, Cat, Cow),
# которые наследуют Animal, но изменяют его поведение (метод make_sound()). В конце создайте список содержащий экземпляры
# этих животных и вызовите make_sound() для каждого животного в цикле.

# Определение базового класса Animals (Животные)
class Animals:
    # Метод make_sound, который должен быть переопределен в подклассах
    def make_sound(sound):
        pass

# Определение подкласса Dog (Собака), который наследует от класса Animals
class Dog(Animals):
    # Переопределение метода make_sound для собаки
    def make_sound(self):
        print("Гав")

# Определение подкласса Cat (Кошка), который наследует от класса Animals
class Cat(Animals):
    # Переопределение метода make_sound для кошки
    def make_sound(self):
        print("Мяу")

# Определение подкласса Cow (Корова), который наследует от класса Animals
class Cow(Animals):
    # Переопределение метода make_sound для коровы
    def make_sound(self):
        print("Муу")

# Создание экземпляров классов Dog, Cat и Cow
dog = Dog()
cat = Cat()
cow = Cow()

# Создание списка, содержащего экземпляры различных животных
animals = [Dog(), Cat(), Cow()]

# Цикл, в котором каждый элемент списка animals вызывает метод make_sound соответствующего класса
for animal in animals:
    animal.make_sound()



